#! /bin/bash
#Author - Jan Jakubiak

#Variables used in the course of the program, named accordingly to their purpose.
recursive=0
upper=0
lower=0
sed=0
filedetected=0
directorydetected=0
number=0

#Recursive functions for lowercasing, uppercasing and transforming filenames according to sed patterns.


#Help function, called down below in case of errors to show the user how to properly use the "modify" command
helpf() {
    echo "Command modify allows to change filenames in the given directory, with the possibility to recursively change names of all the files in the directory and its subdirectories."
    echo "There are two possible groups of variations of modify with it arguments:"
    echo " - modify [-r] [-u | -l] <file name or a directory name>"
    echo " - modify [-r] <sed pattern> <file name or a directory name>"
    echo "With correct arguments and their uses presented below:"
    echo " - [-u | -l] - Allows to choose between lowercasing the names or uppercasing them. Choosing both results in an error."
    echo " - [-h] - Lists the description of the command, which is what is currently on your screen."
    echo " - [-r] - Enables the recursive changes of filenames in all the subdirectories"
    echo " - <sed pattern> - Changes the filename or filenames according to the given sed pattern"
    echo " - <file name or a directory name> - The name of the file we want to rename, or of the directory we want to recursively rename all the files in"
    exit
}


#Recursive function for uppercasing filenames. This function takes one argument - the directory to which the function enters.
recupper() {
#At the start of the recursive function, we enter the directory.
cd $1
#We then go through all the files in said directory. We change the names of all the actual files, and recursively go further in all the subdirectories.
for file in *
        do
            if [ -f "$file" ]
                then
                #The following lines are used to rename the file, without also uppercasing its extension.
                noext="${file%.*}"
                #Here we check if the filename without the extension is the same as the whole filename. If it is, we simply rename the file; if it's not, we split the change the name without the extension, and join the two strings back together. 
                if [ $file == $noext ]
                    then
                    rename 'y/a-z/A-Z/' $file
                    else
                    #Here we uppercase the part of the filename without the extension
                    noext=${noext^^}
                    #Here we extract the extension itself
                    ext="${file##*.}"
                    #We join the two strings together, with a dot between to create a proper filename
                    joined=$noext.$ext
                    #And finally we rename the file using the mv command
                    mv $file $joined
                fi
            fi
            if [ -d "$file" ]
                then
                #There is only one argument for the recupper function - the name of the directory we want to enter.
                recupper $file
            fi
        done

cd ..
}

#Recursive function for lowercasing filenames. This function takes one argument - the directory to which the function enters.
reclower() {
cd $1
#Arguments for commands in this function work analogically to the ones for the recupper function.
for file in *
        do
            if [ -f "$file" ]
                then
                noext="${file%.*}"
                #Lowercasing the filename works analogically to uppercasing it - all the steps are the same.
                if [ $file == $noext ]
                    then
                    rename 'y/A-Z/a-z/' $file
                    else
                    noext=${noext,,}
                    ext="${file##*.}"
                    joined=$noext.$ext
                    mv $file $joined
                fi
            fi
            if [ -d "$file" ]
                then
                reclower $file
            fi
        done

cd ..
}




#Recursive function for sed patterns. This function takes 2 arguments - first argument is a directory to which the function enters, second argument is the sed pattern.
recsed() {
cd $1
for file in *
        do
            if [ -f "$file" ]
                then
                #The arguments for the rename command are the sed pattern, always provided as the second argument of the recsed function, and the name of the file we want to rename.
                noext="${file%.*}"
                #Changing the filename according to the sed pattern is similar to the way we uppercase and lowercase the filenames.
                if [ $file == $noext ]
                    then
                    rename $2 $file
                    else
                    #The only difference is here. Instead of simply using ^^ or ,, to change the string noext, we use the sed command to change the string. The argument for the sed command is our $pattern argument, given to the recsed function as the second argument.
                    noext=$(echo $noext | sed $2)
                    ext="${file##*.}"
                    joined=$noext.$ext
                    mv $file $joined
                fi
            fi
            if [ -d "$file" ]
                then
                #The arguments for the recsed command are the name of the directory we want to enter and the sed pattern, always provided as the second argument of the recsed function.
                recsed $file $2
            fi
        done

cd ..
}



#Checking if there are any arguments at all.
if [ -z $1 ]
then
echo "There are no arguments for the modify command. Provide correct arguments for the command to take action."
helpf
exit
fi





#Going through all the input arguments and setting the respective vakuables to correct values, also checking if the provided arguments are correct.
for i
do


#Changing the variables to mark if a file or a directory is recognised. These variables are used later on to help the program decide which route it should go.
if [ -d "${i}" ]
then
directorydetected=1
fi

if [ -f "${i}" ]
then 
filedetected=1
fi


#Going through input arguments and working appropriately, changing valuable to indicate what kind of transformation we will be doing.
case "$i" in
    -h)
    echo "Command modify allows to change filenames in the given directory, with the possibility to change names of all the files in the directory and its subdirectories."
    echo "There are two possible groups of variations of modify with it arguments:"
    echo " - modify [-r] [-u | -l] <file name or a directory name>"
    echo " - modify [-r] <sed pattern> <file name or a directory name>"
    echo "With correct arguments and their uses presented below:"
    echo " - [-u | -l] - Allows to choose between lowercasing the names or uppercasing them. Choosing both results in an error."
    echo " - [-h] - Lists the description of the command, which is what is currently on your screen."
    echo " - [-r] - Enables the recursive changes of filenames in all the subdirectories"
    echo " - <sed pattern> - Changes the filename or filenames according to the given sed pattern"
    echo " - <file name or a directory name> - The name of the file we want to rename, or of the directory we want to recursively rename all the files in"
    exit;;
    -r)
    recursive=1
    number=$((number+1));;
    -l)
    lower=1
    number=$((number+1));;
    -u)
    upper=1
    number=$((number+1));;
    #In this part we check if the argument is a sed pattern - if it has 3 slashes in it. If so, we save it as "pattern" and change the variable "sed" to 1, to mark the fact that the transformation that will be taking part is the sed pattern one.
    */*/*/*)
    sed=1
    pattern="$i"
    number=$((number+1));;
    #This part only launches if the argument doesn't fulfill any of the above criteria, so it may be incorrect.
    *)
    #We check if the argument is not a file or a directory, in which case it would be correct. If it's not, we output an appropriate error message along with the modify -h page and exit the program.
    if [ ! -f "${i}" ] && [ ! -d "${i}" ]
    then
    echo "One or more of the arguments is invalid. Check the syntax of the used command"
    echo ""
    helpf
    exit
    fi;;
esac
done


#Checking if we received a filename or a directory name
if [ $filedetected -eq 0 ] && [ $directorydetected -eq 0 ]
    then
    echo "No file or directory specified"
    echo ""
    helpf
    exit
fi


#Checking if we received a filename and a directory name - in which case we return an error and close the program.
if [ $filedetected -eq 1 ] && [ $directorydetected -eq 1 ]
    then
    echo "You can't rename a file and a folder at the same time"
    echo ""
    helpf
    exit
fi


#Checking if the user tried to recursively go through a file instead of a directory, in which case we return an error and close the program.
if [ $recursive -eq 1 ] && [ $filedetected -eq 1 ]
    then
    echo "You can't recursively rename files under a file. Either rename just a file without argument -r or choose a directory to recursively rename everything under it."
    echo ""
    helpf
    exit
fi


#Checking if the user tried to rename a folder instead of a file, in which case we return an error and close the program.
if [ $recursive -eq 0 ] && [ $directorydetected -eq 1 ]
    then
    echo "You can't rename a folder. Either rename a file without argument , or include an argument -r to recursively rename all files under that folder."
    echo ""
    helpf
    exit
fi


#We shift the argument line by the number of detected arguments (out of -r, -l, -u and sed pattern). This ensures that the $1 contains the name of the file or a directory, and eventual other names are in next arguments.
shift $number


#We then go through all the remaining arguments, so through all the names of files or directories, and proceed with changing filenames according to received arguments.
for i
do

    #Saving the name if the argument is detected to be the name of a file or a folder.
    if [ -d "${i}" ]
    then
    name="$i"
    fi

    if [ -f "${i}" ]
    then 
    name="$i"
    fi


    #The part of the program where the uppercasing transformation takes place.
    if [ $upper -eq 1 ]
        then
        #Here we check if both of the -l and -u arguments were inputted. If so, transformation is impossible. We provide an appropriate error code along with the -h page and exit the program.
        if [ $lower -eq 1 ]
            then
            echo "Too many parameters. Names can only be lower-cased or upper-cased"
            echo ""
            helpf
            exit
        fi
        #Here we check if both the -u argument and the sed pattern were inputted. If so, transformation is impossible. We provide an appropriate error code along with the -h page and exit the program.
        if [ $sed -eq 1 ]
            then
            echo "Too many parameters. Provide correct arguments for the function"
            echo ""
            helpf
            exit
        fi
        #Here we check if the changes need to be recursive. If so, we enter the folder in which the changes will take place and run a separate function recupper, designed for that purpose.
        if [ $recursive -eq 1 ]
            then
            cd $name
            recupper $(pwd)
            else
            #Here is the non-recursive uppercasing transformation. We check if the file we want to change the name of is an actually existing file, and if it is we uppercase its name.
            if [ -f $name ]
                then
                #noext saves the part of the filename without an extension
                noext="${name%.*}"
                #Here we check if the filename without the extension is the same as the whole filename. If it is, we simply rename the file; if it's not, we split the change the name without the extension, and join the two strings back together.                 
                if [ $name == $noext ]
                    then
                    rename 'y/a-z/A-Z/' $name
                    else
                    #Here we uppercase the part of the name without extension
                    noext=${noext^^}
                    #Here we extract the extension itself from the filename, to join it together with the uppercased rest of the name
                    ext="${name##*.}"
                    #We join the two string together with a . between, to create a proper filename
                    joined=$noext.$ext
                    #And finally we change the name of our file
                    mv $name $joined
                fi
                
            fi
        fi
    fi

    #The part of the program where the lowercasing transformation takes place. We don't need to check if both -u and -l arguments were inputted together, because we already checked that in the uppercasing transformation part.
    if [ $lower -eq 1 ]
        then
        #Here we check if both the -l argument and the sed pattern were inputted. If so, transformation is impossible. We provide an appropriate error code along with the -h page and exit the program.
        if [ $sed -eq 1 ]
            then
            echo "Too many parameters. Provide correct arguments for the function"
            echo ""
            helpf
            exit
        fi
        #Here we check if the changes need to be recursive. If so, we enter the folder in which the changes will take place and run a separate function reclower, designed for that purpose.
        if [ $recursive -eq 1 ]
            then
            cd $name
            reclower $(pwd)
            else
            #Here is the non-recursive lowercasing transformation. We check if the file we want to change the name of is an actually existing file, and if it is we lowercase its name. The operations are analogical to the ones in the uppercasing transformation above.
            if [ -f $name ]
                then
                noext="${name%.*}"
                if [ $name == $noext ]
                    then
                    rename 'y/A-Z/a-z/' $name
                    else
                    noext=${noext,,}
                    ext="${name##*.}"
                    joined=$noext.$ext
                    mv $name $joined
                fi
            fi
        fi
    fi

    #The part of the program where transformation according to the sed pattern takes place.
    if [ $sed -eq 1 ] 
        then
        #Here we check if any of -l or -u arguments were inputted - if so, transformation according to the sed pattern is impossible. We provide an appropriate error code along with the -h page and exit the program.
        if [ $lower -eq 1 ] || [ $upper -eq 1 ]
            then
            echo "Either provide the sed pattern, or choose [-u|-l]"
            echo ""
            helpf
            exit
        fi
        #Here we check if the changes according to the sed pattern need to be recursive. If so, we enter the folder in which the changes will take place and run a separate function recsed, designed for that purpose.
        if [ $recursive -eq 1 ]
            then
            cd $name
            recsed $(pwd) $pattern
            else
            #Here is the non-recursive transformation according to the sed pattern. We check if the file we want to change the name of is an actually existing file, and if it is we change its name according to the sed pattern provided via the command line.
            if [ -f $name ]
                then
                #Operations above work analogically to the ones in the uppercasing transformation, and are explained there.
                noext="${name%.*}"
                if [ $name == $noext ]
                    then
                    rename $pattern $name
                    else
                    #The only change is here, where instead of simply lowercasing or uppercasing the part of the filename without an extension we transform it according to the sed pattern, using the function "sed". "sed" function accepts one argument, which is 
                    #the pattern received through the arguments
                    noext=$(echo $noext | sed $pattern)
                    ext="${name##*.}"
                    joined=$noext.$ext
                    mv $name $joined
                fi
            fi
        fi
    fi

done